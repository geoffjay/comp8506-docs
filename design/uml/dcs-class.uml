@startuml

/' OpenDCS UML
 '
 ' Language: Vala
 '
 ' Because Vala uses public properties and can generate getters and setters
 ' using syntactic sugar any public property will be assumed to have an
 ' associated get/set. Other property cases will be documented.
 '
 ' If a class contains only properties and methods the separators will not be
 ' modified allowing plantuml to put each where they belong. In the case that
 ' the class contains signals and/or getters and setters it will use:
 '
 ' class Foo {
 '     int foo_prop
 '     -- signals --
 '     void foo_signal ()
 '     ---- ' force a blank line
 '     void foo_method ()
 '     .. get/set ..
 '     int get_foo_prop ()
 '     void set_foo_prop (int foo)
 ' }
 '/

title OpenDCS UML

' Control layout
left to right direction
'page 4x1

' Control output
!define SHOW_CONTENT
'!define SHOW_ENUM
'!define SHOW_GLIB_ASSOC
'!define SHOW_GTK_ASSOC

package "Dcs" #DDDDDD {

    top to bottom direction

    '
    ' Enumerations
    '
    !ifdef SHOW_ENUM
    !include core/enums.uml
    !endif

    '
    ' Interfaces
    '

    !include core/config.uml
    !include core/application.uml
    !include core/buildable.uml
    !include core/cld-adapter.uml
    !include core/container.uml
    !include core/dbus-interface.uml
    !include core/factory.uml
    !include core/object.uml
    !include core/plugin.uml
    !include core/ref-container.uml
    !include core/serializable.uml

    '
    ' Classes
    '

    !include core/abstract-buildable.uml
    !include core/abstract-config.uml
    !include core/abstract-container.uml
    !include core/abstract-object.uml
    !include core/config-node.uml
    !include core/dataseries.uml
    !include core/legacy-config.uml
    !include core/legacy-plugin.uml
    !include core/syslog.uml
    !include core/message.uml
    !include core/meta-config.uml
    !include core/meta-factory.uml
    !include core/module-loader.uml
    !include core/node.uml
    !include core/plugin-information.uml
    !include core/plugin-loader.uml
    !include core/plugin-extension.uml
    !include core/plugin-manager.uml
    !include core/point.uml

    /'
     'box Delegates {
     '    +void ModelUpdateFunc ()
     '}
     '/

    '
    ' Associations
    '

    AbstractBuildable --|> AbstractObject
    AbstractBuildable ..|> Buildable
    AbstractConfig ..|> Config
    AbstractContainer --|> AbstractBuildable
    AbstractContainer ..|> Container
    AbstractObject ..|> Object
    AbstractObject ..|> Serializable
    ConfigNode ..|> AbstractConfig
    DataSeries --|> AbstractObject
    DataSeries ..|> Object
    DataSeries ..|> Buildable
    DataSeries ..|> CldAdapter
    MetaConfig ..|> Config
    MetaFactory ..|> Factory
    Node --|> Gee.TreeMap
    Node ..|> Buildable
    Node ..|> Serializable
    Node ..|> Object
    Node ..|> RefContainer
    PluginExtension ..|> Extension
    PluginExtension --|> Peas.ExtensionBase
    PluginExtension ..|> Peas.Activatable
    PluginLoader --|> ModuleLoader

    !ifdef SHOW_GLIB_ASSOC
    AbstractConfig --|> GLib.Object
    AbstractObject --|> GLib.Object
    Application --|> GLib.Object
    Buildable --|> GLib.Object
    CldAdapter --|> GLib.Object
    Config --|> GLib.Object
    Container --|> GLib.Object
    DataSeries --|> GLib.Object
    DBusInterface --|> GLib.Object
    Factory --|> GLib.Object
    LegacyConfig --|> GLib.Object
    LegacyPlugin --|> GLib.Object
    Message --|> GLib.Object
    MetaConfig --|> GLib.Object
    MetaFactory --|> GLib.Object
    ModuleLoader --|> GLib.Object
    Object --|> GLib.Object
    Plugin --|> GLib.Object
    PluginInformation --|> GLib.Object
    Point --|> GLib.Object
    RefContainer --|> GLib.Object
    SysLog --|> GLib.Object
    !endif

    '
    ' Notes
    '

    legend right
        OpenDCS is built using the Vala language which can use special syntax
        to define property getters and setters with scope that's different from
        the property itself. For instance:
            <i>public int value { get; private set; }</i>
        which will result in a public getter and a private setter. UML has no
        way of displaying this if so it should be implied that any property that
        is marked public (+) will also have a public get/set, and if a property
        should specify scope it will be marked as internal (~).
    end legend

    note top of SysLog: Bad name, planning on changing

    note top of Message
        This should probably be a compact class.
        Other namespaces will contain message classes
        as well that are more specific to the scope.
    end note

    package "App" {

        '
        ' Interfaces
        '

        !include core/app-view.uml

        '
        ' Classes
        '

        !include core/app-controller.uml
        !include core/app-model.uml

        '
        ' Associations
        '

        Model..|> Container

        !ifdef SHOW_GLIB_ASSOC
        Controller --|> GLib.Object
        Model --|> GLib.Object
        View --|> GLib.Object
        !endif

        '
        ' Notes
        '
    }

/'
 '    package "UI" {
 '
 '        '
 '        ' Enumerations
 '        '
 '
 '        !ifdef SHOW_ENUM
 '        !include ui/enums.uml
 '        !endif
 '
 '        '
 '        ' Interfaces
 '        '
 '
 '        interface Widget {
 '            -- properties --
 '            +{abstract} bool fill
 '        }
 '
 '        '
 '        ' Classes
 '        '
 '
 '        abstract class Canvas {
 '            +virtual string id
 '        }
 '
 '        abstract class SimpleWidget {
 '            +virtual string id
 '            +{abstract} string xml
 '            +{abstract} string xsd
 '            #virtual Xml.Node* node
 '            +bool fill
 '            +{abstract} void build_from_xml_node (Xml.Node* node)
 '            #{abstract} void update_node ()
 '        }
 '
 '        abstract class CustomWidget {
 '            +virtual string id
 '            +{abstract} string xml
 '            +{abstract} string xsd
 '            #virtual Xml.Node* node
 '            +bool fill
 '            +{abstract} void build_from_xml_node (Xml.Node* node)
 '            #{abstract} void update_node ()
 '        }
 '
 '        abstract class CompositeWidget {
 '            +virtual string id
 '            +{abstract} string xml
 '            +{abstract} string xsd
 '            #virtual Xml.Node* node
 '            +bool fill
 '            +{abstract} Gee.Map<string, Object> objects
 '            +{abstract} void build_from_xml_node (Xml.Node* node)
 '            #{abstract} void update_objects (Gee.Map<string, Object> val)
 '        }
 '
 '        '
 '        ' Associations
 '        '
 '
 '        Widget --|> GLib.Object
 '        Canvas --|> Gtk.DrawingArea
 '        Canvas ..|> Object
 '        SimpleWidget --|> Gtk.Box
 '        SimpleWidget ..|> Widget
 '        SimpleWidget ..|> Buildable
 '        SimpleWidget ..|> Object
 '        CustomWidget --|> Gtk.DrawingArea
 '        CustomWidget ..|> Widget
 '        CustomWidget ..|> Buildable
 '        CustomWidget ..|> Object
 '        CompositeWidget --|> Gtk.Box
 '        CompositeWidget ..|> Widget
 '        CompositeWidget ..|> Container
 '        CompositeWidget ..|> Buildable
 '        CompositeWidget ..|> Object
 '
 '        '
 '        ' Notes
 '        '
 '
 '        note top of CompositeWidget
 '            This is just a simple widget that implements Container.
 '            Could probably just simplify it down to
 '            "Dcs.UI.CompositeWidget : Dcs.UI.SimpleWidget, Dcs.Container"
 '        end note
 '    }
 '/

    package "CLI" {

        '
        ' Enumerations
        '
        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        !include cli/application.uml
        !include cli/factory.uml

        '
        ' Associations
        '
        '

        CLI.Factory --|> GLib.Object
        CLI.Application --|> GLib.Application
        CLI.Application ..|> Application
        CLI.Factory ..|> Factory

        '
        ' Notes
        '
    }

    package "Control" {

        '
        ' Enumerations
        '
        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }

    package "DAQ" {

        '
        ' Enumerations
        '
        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '
        !include daq/channel.uml

        '
        ' Classes
        '

        !include daq/device-manager.uml
        !include daq/device.uml
        !include daq/factory.uml

        '
        ' Associations
        '

        /'Device --|> GLib.Object'/
        /'DAQ.Factory --> GLib.Object'/
        Channel ..|> Object
        DeviceManager --|> PluginManager
        DAQ.Factory ..|> Factory

        '
        ' Notes
        '
    }

    package "Log" {

        '
        ' Enumerations
        '
        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        !include log/backend.uml

        '
        ' Classes
        '

        !include log/backend-manager.uml
        !include log/backend-proxy.uml
        !include log/factory.uml

        '
        ' Associations
        '

        /'
         'BackendProxy --|> GLib.Object
         'Log.Factory --|> GLib.Object
         '/
        Backend ..|> Plugin
        BackendManager --|> PluginManager
        Log.Factory ..|> Factory

        '
        ' Notes
        '
    }

    package "Net" {

        '
        ' Enumerations
        '
        !ifdef SHOW_ENUM
        !include net/enums.uml
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        !include net/factory.uml
        !include net/rest-service.uml
        !include net/zmq-client.uml
        !include net/zmq-service.uml

        '
        ' Associations
        '

        /'
         'Net.Factory --|> GLib.Object
         'ZmqClient --|> GLib.Object
         'ZmqService --|> GLib.Object
         '/
        Net.Factory ..|> Factory
        RestService --|> Soup.Server

        '
        ' Notes
        '
    }
}

@enduml
