@startuml

/' OpenDCS UML
 '
 ' Language: Vala
 '
 ' Because Vala uses public properties and can generate getters and setters
 ' using syntactic sugar any public property will be assumed to have an
 ' associated get/set. Other property cases will be documented.
 '
 ' If a class contains only properties and methods the separators will not be
 ' modified allowing plantuml to put each where they belong. In the case that
 ' the class contains signals and/or getters and setters it will use:
 '
 ' class Foo {
 '     int foo_prop
 '     -- signals --
 '     void foo_signal ()
 '     ---- ' force a blank line
 '     void foo_method ()
 '     .. get/set ..
 '     int get_foo_prop ()
 '     void set_foo_prop (int foo)
 ' }
 '/

' Control layout
left to right direction
'page 4x1

' Control output
!define SHOW_CONTENT
'!define SHOW_ENUM
'!define SHOW_GLIB_ASSOC
'!define SHOW_GTK_ASSOC

package "Dcs" #DDDDDD {

    top to bottom direction


        '
        ' Enumerations
        '
    !ifdef SHOW_ENUM
    !endif

    '
    ' Interfaces
    '

    !include core/config.uml
    !include core/dbus-interface.uml
    !include core/factory.uml
    !include core/object.uml
    !include core/plugin.uml
    !include core/ref-container.uml
    !include core/serializable.uml
    !include core/view.uml

    '
    ' Classes
    '

    !include core/abstract-config.uml
    !include core/application.uml
    !include core/config-node.uml
    !include core/controller.uml
    !include core/dataseries.uml
    !include core/syslog.uml
    !include core/message.uml
    !include core/meta-config.uml
    !include core/meta-factory.uml
    !include core/node.uml
    !include core/plugin.uml
    !include core/plugin-information.uml
    !include core/plugin-manager.uml
    !include core/point.uml
    !include core/ref-linker.uml

    /'
     'box Delegates {
     '    +void ModelUpdateFunc ()
     '}
     '/

    '
    ' Associations
    '

    ConfigNode ..|> AbstractConfig
    DataSeries ..|> Object
    MetaConfig ..|> Config
    MetaFactory ..|> Factory
    Node --|> Gee.TreeMap
    Node ..|> Buildable
    Node ..|> Serializable
    Node ..|> Object
    Node ..|> RefContainer
    Plugin ..|> Extension
    Plugin --|> Peas.ExtensionBase
    Plugin ..|> Peas.Activatable
    Model..|> Container

    !ifdef SHOW_GLIB_ASSOC
    AbstractConfig --|> GLib.Object
    Application --|> GLib.Object
    Config --|> GLib.Object
    DataSeries --|> GLib.Object
    DBusInterface --|> GLib.Object
    Factory --|> GLib.Object
    Message --|> GLib.Object
    MetaConfig --|> GLib.Object
    MetaFactory --|> GLib.Object
    Object --|> GLib.Object
    Plugin --|> GLib.Object
    PluginInformation --|> GLib.Object
    Point --|> GLib.Object
    RefContainer --|> GLib.Object
    SysLog --|> GLib.Object
    Controller --|> GLib.Object
    Model --|> GLib.Object
    View --|> GLib.Object
    !endif

    '
    ' Notes
    '

    legend right
        OpenDCS is built using the Vala language which can use special syntax
        to define property getters and setters with scope that's different from
        the property itself. For instance:
            <i>public int value { get; private set; }</i>
        which will result in a public getter and a private setter. UML has no
        way of displaying this if so it should be implied that any property that
        is marked public (+) will also have a public get/set, and if a property
        should specify scope it will be marked as internal (~).
    end legend

    package "Control" {

        '
        ' Enumerations
        '

        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        !include control/controller-manager.uml
        !include control/controller.uml
        !include control/factory.uml

        '
        ' Associations
        '

        Controller ..|> Object
        ControllerManager --|> PluginManager
        Control.Factory ..|> Factory

        '
        ' Notes
        '
    }

    package "DAQ" {

        '
        ' Enumerations
        '

        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        !include daq/device-manager.uml
        !include daq/device.uml
        !include daq/factory.uml

        '
        ' Associations
        '

        Device ..|> Plugin
        DeviceManager --|> PluginManager
        DAQ.Factory ..|> Factory

        '
        ' Notes
        '
    }

    package "Log" {

        '
        ' Enumerations
        '

        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        !include log/backend-manager.uml
        !include log/backend.uml
        !include log/factory.uml

        '
        ' Associations
        '

        /'
         'BackendProxy --|> GLib.Object
         'Log.Factory --|> GLib.Object
         '/
        Backend ..|> Plugin
        BackendManager --|> PluginManager
        Log.Factory ..|> Factory

        '
        ' Notes
        '
    }

    package "Net" {

        '
        ' Enumerations
        '

        !ifdef SHOW_ENUM
        !endif

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        !include net/factory.uml
        !include net/service.uml
        !include net/rest-service.uml
        !include net/request.uml
        !include net/reply.uml
        !include net/publish.uml
        !include net/subscribe.uml

        '
        ' Associations
        '

        Net.Factory ..|> Factory
        RestService --|> Soup.Server

        '
        ' Notes
        '
    }
}

@enduml
